Musat Mihai-Robert 
Grupa 323CB 

==========================================================Tema2 IOCLA - CryptoFun==========================================================
	In rezolvarea temei, pentru a solutiona fiecare task in parte, am realizat pe langa implementarea functiilor prezente in scheletul de cod si implementarea unor functii ajutatoare.
	Astfel pentru realizarea task-ului 1, am utilizat functia ajutatoare xor_byte_by_byte in care am luat cate un byte din mesaj 
si din cheie si am facut xor intre fiecare doi astfel de octeti pana cand am ajuns la finalul sirului.Daca am ajuns la finalul sirului, 
inseamna ca trebuie sa fac salt neconditionat la label-ul end_xor_strings prin care ies din functia la care am facut referire anterior.
	Pentru realizarea task-ului 2, am avut grija mai intai sa salvez intr-un byte primul octet din mesaj, adica m1 deoarece acesta 
s-ar fi putut pierde in urma aplicarii repetate a operatiei xor asupra cate unui octet din mesaj.Ca functii ajutatoare, am mai folosit aici rolling_xor_byte_by_byte, in care am grija la inceput sa cresc indexul cu care parcurg sirul, tocmai pentru a nu pierde informatia.Daca
am ajuns la sfarsitul sirului, inseamna ca trebuie sa ies din functie si fac salt neconditionat la end_rolling_xor.Apoi iau treptat cate
un octet si aplic xor intre octetul curent si octetul anterior din mesaj pentru a obtine octetii criptati asa cum este descris in enunt. 
La final, daca inca mai am octeti neexplorati fac salt neconditionat la rolling_xor_byte_by_byte pentru a repeta procesul.  
	Pentru implementarea task-ului 3, am folosit mai multe label-uri ajutatoare: convert prin care fac conversia atat a mesajului, cat 
si a cheii din hexazecimal in decimal, move prin care fac parcurgerea si impartirea in jumatate a sirului pe care vreau sa aplic xor deoarece
asa cum arata in enunt se iau cate doi octeti.Atunci cand parcurg, daca in al e cifra sar la label-ul digit si daca nu, la label-ul letter.
In mod analog, fac acest salt si pentru ah folosind label-ul cmp_for_ah din care sar fie la digit2, fie la letter2 pentru a face conversia
din caracter in cifra, respectiv din caracter in litera.Label-ul repeat_process nu face altceva decat sa treaca mai departe prin deplasarea
pointerilor pe care i-am fixat in al si ah.In final, functia xor_hex_strings va avea aceeasi forma ca cea de la task1.
	Pentru a realiza task-ul 5, am implementat o multime de functii ajutatoare, dar care au la baza aceeasi idee: case_f, case_r, etc
deoarece eu stiu sigur ca mesajul decriptat contine mesajul "force".In interiorul fiecareia dintre aceste functii, iau cate un byte din mesaj
fac xor cu cheia pentru a obtine un octet din mesajul decriptat si daca obtin in urma acestei operatii una dintre literele din mesaj, 
atunci inseamna ca pot sa continui cautarea, daca nu sar la label-ul fail deoarece trebuie fie dimensiunea cheii nu este suficient de mare,
fie trebuie sa avansez in sir.Label-ul continue nu face altceva decat sa reia procesul de decriptare pana ce am ajuns la terminatorul
de sir, sau sa reia procesul de xor-are intre cheie si mesaj.
	Pentru realizarea task-ului 6, am folosit urmatoarele functii: check_byte in care efectiv iau cate un byte din mesaj si din cheie
si daca am ajuns la final, inseamna ca trebuie sa ies din functie si sar la label-ul end_decode, sau daca nu am nicio litera mica, sar la
label-ul next_step in care avansez in mesaj.Apoi, tot in functia check_byte trebuie sa aflu offset-urile atat al octetului din mesaj, cat 
si a celui din cheie fata de caracterul 'a'.Daca offset-ul mesajului este mai mare decat cel al cheii, inseamna ca este ok, deci pot sa 
sar la label-ul ok,iar daca nu la label-ul not_ok.O functie auxiliara este de asemenea reprezentata prin label-ul ok2, in care practic
reiau procesul de la functia check_byte, iar la final avansez in mesaj prin intermediul label-ului next_step.

